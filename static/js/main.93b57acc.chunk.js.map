{"version":3,"sources":["logo.svg","request/axios.js","Componets/SingleCard.js","Componets/Card.jsx","Componets/Jumbotron.jsx","request/request.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Axios","axios","create","baseURL","SingleCard","props","className","active","province","title_np","count","ans_np","Card","useState","movies","setMovies","useEffect","a","fetchUrl","get","res","data","cases","fetchData","map","movie","Key","Message","href","role","React","Component","request","providence","fqa","hospital","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,0KCQ5BC,E,OANDC,EAAMC,OAChB,CACIC,QAAS,kCCQFC,G,kBAVI,SAACC,GAAD,OACf,yBAAKC,UAAU,YACX,yBAAKA,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAd,YAAqCD,EAAME,OAAOC,UAAYH,EAAME,OAAOE,UAC3E,uBAAGH,UAAU,aAAaD,EAAME,OAAOG,OAASL,EAAME,OAAOI,OAA7D,UC4BDC,EA/BF,SAACP,GAAW,IAAD,EACQQ,mBAAS,CAAC,KADlB,mBACbC,EADa,KACLC,EADK,KAoBpB,OAjBAC,qBAAU,YACS,uCAAG,8BAAAC,EAAA,0DACVZ,EAAMa,SADI,gCAEQlB,EAAMmB,IAAId,EAAMa,UAFxB,cAEJE,EAFI,OAGVL,EAAUK,EAAIC,KAAKb,SAASD,QAHlB,kBAKHa,GALG,WAMHf,EAAME,OANH,kCAOQP,EAAMmB,IAAId,EAAME,QAPxB,eAOJa,EAPI,OAQVL,EAAUK,EAAIC,KAAKb,SAASc,OARlB,kBASHF,GATG,4CAAH,qDAafG,KACD,CAAClB,EAAMa,WAGN,yBAAKZ,UAAU,OAEVQ,EAAOU,KAAI,SAACC,GAAD,OAAW,kBAAC,EAAD,CAAYC,IAAKD,EAAMf,MAAOH,OAAQkB,S,gCCzBpDE,E,uKAGb,OACI,yBAAKrB,UAAU,aACX,wBAAIA,UAAU,aAAd,oBACA,uBAAGA,UAAU,QAAb,wBACA,wBAAIA,UAAU,SACd,uBAAGA,UAAU,QACT,uBAAGA,UAAU,8BAA8BsB,KAAK,2CAA2CC,KAAK,UAAhG,4B,GATiBC,IAAMC,WCK5BC,EAPC,CAEZC,WAAY,wBACZC,IAAK,eACLC,SAAU,4BC0BCC,MArBf,WACE,OACE,yBAAK9B,UAAU,aACb,kBAAC,EAAD,MAEA,yBAAKA,UAAU,YACb,wBAAIA,UAAU,sBAAd,2CAEF,kBAAC,EAAD,CAAMY,SAAUc,EAAQC,aACxB,6BACA,yBAAK3B,UAAU,YACb,wBAAIA,UAAU,sBAAd,0CAEF,kBAAC,EAAD,CAAMC,OAAQyB,EAAQC,eCVRI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.93b57acc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios';\r\n\r\nconst Axios = axios.create(\r\n    {\r\n        baseURL: \"https://data.nepalcorona.info\"\r\n    }\r\n)\r\n\r\nexport default Axios;","import React from 'react';\r\nimport \"./CardStyle.css\";\r\nconst SingleCard = (props) => (\r\n    <div className=\"col-md-3\">\r\n        <div className=\"card\">\r\n            <div className=\"card-body\">\r\n                <h3 className=\"card-title\">Province {props.active.province || props.active.title_np}</h3>\r\n                <p className=\"card-text\">{props.active.count || props.active.ans_np} </p>\r\n            </div>\r\n        </div>\r\n    </div>\r\n)\r\nexport default SingleCard;","import React, { useState, useEffect } from 'react';\r\nimport Axios from '../request/axios';\r\nimport SingleCard from './SingleCard';\r\n\r\nconst Card = (props) => {\r\n    const [movies, setMovies] = useState(['']);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            if (props.fetchUrl) {\r\n                const res = await Axios.get(props.fetchUrl);\r\n                setMovies(res.data.province.active);\r\n\r\n                return res;\r\n            } else if (props.active) {\r\n                const res = await Axios.get(props.active);\r\n                setMovies(res.data.province.cases);\r\n                return res;\r\n\r\n            }\r\n        }\r\n        fetchData();\r\n    }, [props.fetchUrl]);\r\n\r\n    return (\r\n        <div className=\"row\">\r\n\r\n            {movies.map((movie) => <SingleCard Key={movie.count} active={movie} />)}\r\n\r\n        </div>\r\n\r\n    )\r\n\r\n\r\n}\r\nexport default Card;","import React from 'react';\r\n\r\nexport default class Message extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"jumbotron\">\r\n                <h1 className=\"display-3\">Covid-19 Updates</h1>\r\n                <p className=\"lead\">#Stay Home Stay Safe</p>\r\n                <hr className=\"my-2\" />\r\n                <p className=\"lead\">\r\n                    <a className=\"text-center text-style-none\" href=\"https://www.facebook.com/akash.sah.2017/\" role=\"button\">Developed By Akash</a>\r\n                </p>\r\n            </div>\r\n        )\r\n    }\r\n}","const request = {\r\n\r\n    providence: '/api/v1/covid/summary',\r\n    fqa: '/api/v1/faqs',\r\n    hospital: '/api/v1/resources/health'\r\n\r\n};\r\nexport default request;\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport FQA from './Componets/FQA';\nimport './App.css';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport Card from './Componets/Card';\nimport Message from './Componets/Jumbotron';\nimport request from './request/request';\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Message />\n\n      <div className=\"Province\">\n        <h1 className=\"lead text-black-50\">Nepal Active Cases Updates By Province</h1>\n      </div>\n      <Card fetchUrl={request.providence} />\n      <hr />\n      <div className=\"Province\">\n        <h1 className=\"lead text-black-50\">Nepal Total Cases Updates By Province</h1>\n      </div>\n      <Card active={request.providence} />\n    </div>\n\n\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}